(define (tree-sort elements)
  (define (make-tree value left right) (list value left right))
  (define (value tree) (car tree))
  (define (left tree) (cadr tree))
  (define (right tree) (caddr tree))
  (define (insert element T)
    (cond ((null? T) (make-tree element '() '()))
          ((< element (value T)) (make-tree (value T)
                                            (insert element (left T))
                                            (right T)))
          (else (make-tree (value T)
                           (left T)
                           (insert element (right T))))))
  (define (insert-list insert-elements T)
    (if (null? insert-elements) T
        (insert-list (cdr insert-elements)
                     (insert (car insert-elements) T))))
  (define (sort-extract T)
    (if (null? T) '()
        (append (sort-extract (left T))
                (list (value T))
                (sort-extract (right T)))))
  (sort-extract (insert-list elements '())))
          
    