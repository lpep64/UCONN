(define (h-min H) (car H))
(define (left H) (cadr H))
(define (right H) (caddr H))
(define (create-heap v H1 H2)
  (list v H1 H2))

(define (heap-insert f x H)
  (if (null? H)
      (create-heap x '() '())
      (let ((child-value (max x (h-min H)))
            (root-value (min x (h-min H))))
        (create-heap root-value (right H) (insert child-value (left H))))))

(define (combine f Ha Hb)
  (cond ((null? Ha) Hb)
        ((null? Hb) Ha)
        ((< (h-min Ha) (h-min Hb))
         (create-heap (h-min Ha) Hb
                      (combine-heaps (left Ha) (right Hb))))
        (else (create heap (h-min Hb) Ha (combine-heaps (left Hb) (right Hb))))))

(define (empty? H)
    (if (null? H) #t #f))
  
(define (heap-remove f H)
  (combine-heaps (left H) (right H)))
