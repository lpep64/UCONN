;Question 1.)
(define (merge a b)
  (cond ((null? a) b)
        ((null? b) a)
        ((< (car a) (car b)) 
         (cons (car a) (merge (cdr a) b)))
        (else
         (cons (car b) (merge a (cdr b))))))
;Question 2.)
(define (odd l)
	(if (null? l) '()
		(if (null? (cdr l)) (list (car l))
			(cons (car l) (odd (cddr l))))))
(define (even l)
	(if (null? l) '()
		(if (null? (cdr l)) '()
			(cons (cadr l) (even (cddr l))))))


(define (split l)
	(cons (odd l) (cons (even l) `())))

(define (mergesort l)
	(if (null? l) l
		(if (null? (cdr l)) l
			(merge
				(mergesort (car (split l)))
				(mergesort (cadr (split l)))))))







;Question 3.)
(define (ins x l)
  (if (null? l) (list x)
      (if (< x (car l))
          (cons x l)
          (cons (car l) (ins x (cdr l))))))
;Question 4.)
(define (ins2 m x)
	(if (null? x) (list m)
		(let ((y (car x)) (l (cdr x)))
			(if (< m y)
				(cons m x)
				(cons y (ins2 m l))))))


(define (insSort x)
	(if (null? x) '()
		(ins (list (car x)) (insSort (cdr x)))))

;Question 5a.)
(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))

(define (fold-right op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))



;Question 5b.)
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

;Question 5c.)
(define (my-map p sequence)
  (accumulate (lambda (x y) (cons (p x) y))
              '()
              sequence))

;Question 5d.)
(define (my-append seq1 seq2)
  (accumulate cons seq2 seq1))

;Question 5e.)
(define (my-length sequence)
  (accumulate (lambda (x y) (+ 1 y)) 0 sequence))

;Question 5f.)
(define (reverse-r sequence)
    (fold-right (lambda (x y) (append y (list x))) '() sequence))

;Question 5g.)
(define (reverse-l sequence)
    (fold-left (lambda (x y) (cons y x)) '() sequence))

;Question 5h.)
(define (horner-eval x coefficient-list)
    (accumulate (lambda (this-coeff higher-terms)
                        (+ this-coeff
                           (* higher-terms x)))
                0
                coefficient-list))

