"Problem 1"
(define (harmonic n)
  (if (= n 1) 1
      (+ (/ 1.0 n) (harmonic (- n 1)))))

(define (Eulerest n)
  (if (> 0  (- (harmoic n) (log n)))
      (* (- (harmoic n) (log n)) -1.0)
      (- (harmoic n) (log n))))

"Problem 2"
(define (prime? n)
  (define (divisor? k) (= 0 (modulo n k)))
  (define (divisors-upto k)
    (and (> k 1)
         (or (divisor? k) (divisors-upto (- k 1)))))
  (not (divisors-upto (- n 1))))

(define (count-primes m)
  (if (= m 1) 0
      (if (prime? m) (+ 1 (count-primes (- m 1)))
          (+ 0 (count-primes (- m 1))))))

"Problem 3"
(define (rel-prime a b)
  (define (divides-both d)
    (and (= 0 (modulo a d))
         (= 0 (modulo b d))))
  (define (divisor-upto k)
    (and (> k 1)
         (or (divides-both k)
             (divisor-upto (- k 1)))))
  (not (divisor-upto (min a b))))

(define (count-rel-prime n)
  (help-rel-prime n n))

(define (help-rel-prime a b)
    (if (= a 1) 0
        (if (= b 1) (- a 1)
            (if (rel-prime a b) (+ 1 (rel-prime a (- b 1)))
                (+ 0 (rel-prime a (- b 1)))))))

"Problem 4"
(define (lucas n)
  (if (= n 0) 2
      (if (= n 1) 1
          (+ (lucas (- n 1)) (lucas (- n 2))))))

(define (Lucas-ratio n)
  (/ (lucas n) (lucas (- n 1))))

(define (fib n)
  (if (<= n 2) 1
      (+ (fib (- n 1)) (fib (- n 2)))))

(define (Fibonacci-ratio n)
  (/ (fib n) (fib (- n 1))))

(define (fast-Lucas-help n k lucas-a lucas-b)

