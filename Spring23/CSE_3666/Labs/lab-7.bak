(define (make-tree value left right)
  (list value left right))

(define (value T) (car T))
(define (right T) (caddr T))
(define (left T) (cadr T))


"Problem 1"
(define (tree-size T)
  (if (null? T) 0
      (+ 1 (tree-size (left  T)) (tree-size (right T)))
      )
  )

"Problem 2"
(define (tree-depth T)
  (if (>= (left-depth T) (right-depth T)) (+ 1 left-depth)
      (+ 1 right-depth)
      )
  )

(define (left-depth T)
  (if (null? T) 0
      (+ 1 (tree-size (left T)))
      )
  )

(define (right-depth T)
  (if (null? T) 0
      (+ 1 (tree-size (right T)))
      )
  )

"Probelm 3"
(define (count-pred P tree)
  (if (null? T) 0
      (p (tree))
      )
  )